// lint:file-ignore * generated file
// Code generated for package handler by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/404.html
// templates/footer.html
// templates/header.html
// templates/prefix-listing.html
// templates/single-object.html
package handler

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() http.FileSystem {
	return &assetOperator{}
}

var __404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xce\x41\xaa\xc3\x20\x10\xc6\xf1\xfd\x9c\x62\x70\x6f\x02\x59\xfb\xbc\x8b\xe8\x24\xfa\x30\x5a\x26\xd3\x94\x20\xde\xbd\xa4\xb4\xe0\x6a\x16\xf3\x83\xef\xdf\x9a\xd0\xfe\xc8\x4e\x08\x55\x24\x17\x88\xa7\x28\x7b\x56\xbd\x03\x98\x90\x4e\xf4\xd9\x1d\xc7\x9f\xf2\xb5\x88\x4b\x85\x58\xe7\x4d\x59\x40\x1c\x9f\x5c\x5f\xf8\xff\x3c\x24\xad\x97\xbe\x21\x15\xd1\x9e\x8a\x10\x2b\x0b\x80\x88\x68\xe2\xf2\xc3\x21\x31\x79\xa9\x7c\xe9\x7b\x2f\x95\x4d\xd9\xd6\xa6\xde\xcd\x1c\x97\x8f\x36\x73\x48\xa7\x85\xef\x81\xb1\x70\xad\x55\x86\xc2\x77\x00\x00\x00\xff\xff\x61\x9f\xd5\x89\xbd\x00\x00\x00")

func _404HtmlBytes() ([]byte, error) {
	return bindataRead(
		__404Html,
		"404.html",
	)
}

func _404Html() (*asset, error) {
	bytes, err := _404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "404.html", size: 189, mode: os.FileMode(438), modTime: time.Unix(1602845531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _footerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xbf\x4e\xc3\x30\x10\xc7\xf1\x3d\x4f\xf1\x53\x66\x52\x0f\x81\x05\xb9\x99\xba\x30\x31\x14\x1e\xe0\x92\x9c\xff\x20\xd7\x67\xd9\x57\x54\x78\x7a\x84\x48\x59\xca\xc0\x74\xdb\xe7\xbe\xfa\x01\xd6\x89\x28\xd7\xa9\x03\x00\x1b\x46\x2c\x89\x5a\xdb\xf7\xca\x17\x1d\x52\xf4\x41\x71\x9a\x87\xb1\x9f\x0e\xbc\x70\xd6\x4a\x29\x7e\xf2\x8a\xe7\xf9\x8d\x17\xc5\x51\xa5\x92\x67\x38\xa9\x38\xf0\x3b\x27\x29\x5c\x9b\x35\x61\xdc\xc0\xf2\xb7\x77\xdf\x4f\x2f\x54\xd7\xe8\x2b\xad\x8c\xd8\xd0\xc8\x71\xbd\x83\xa3\xa6\xdf\x57\x7e\xf8\xb6\xf1\xa4\x20\xb8\x4a\x8b\x46\xc9\x10\x07\x0d\x8c\x45\x9a\xee\xac\x29\xdb\x27\x42\xa8\xec\xf6\x7d\x50\x2d\xed\xd1\x18\xfd\xf5\x77\x51\x4c\x12\x1f\x73\x7f\x8d\x99\x35\x63\xd6\x3c\xc8\x59\x53\xcc\xbc\x75\x95\xcb\xf0\xd0\x4f\xc7\xe8\x33\x9e\xb2\x35\xf4\x2f\xb8\x45\x9f\xcf\xe5\x46\xbe\x11\x5f\xcb\x26\x5a\x73\x5d\xbc\xb3\x66\x96\xf5\x63\xea\xac\x09\x7a\x4a\x53\xf7\x15\x00\x00\xff\xff\xe5\x5e\xe5\x8d\x8e\x01\x00\x00")

func footerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_footerHtml,
		"footer.html",
	)
}

func footerHtml() (*asset, error) {
	bytes, err := footerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "footer.html", size: 398, mode: os.FileMode(438), modTime: time.Unix(1602845531, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xdd\x72\xda\x3c\x14\xbc\xe7\x29\xf4\xe9\x3a\xb6\xec\x04\x3e\x48\x06\xbb\x25\x4c\xa6\x3f\x81\x40\x02\x21\x84\x3b\x21\xcb\xf6\x09\xb2\x64\xa4\xc3\x8f\x67\xfa\xf0\x1d\x43\xd3\xa6\x49\x3b\x9d\x5c\x79\x7c\x76\x76\xcf\xee\x8e\x4e\xf7\xbf\xc4\x08\xac\x4a\x49\x72\x2c\x54\xdc\xe8\xd6\x1f\xa2\xb8\xce\x22\x2a\x35\xad\x07\x92\x27\x71\x83\x90\x6e\x21\x91\x13\x91\x73\xeb\x24\x46\x74\x83\xa9\xd7\xa1\x07\x00\x01\x95\x8c\xa7\xdc\x26\x90\x59\x9e\x48\x32\x00\xbd\x72\x39\xb7\xa0\xb3\x2e\x3b\xa2\x3f\x05\x34\x2f\x64\x44\x13\xe9\x84\x85\x12\xc1\x68\x4a\x84\xd1\x28\x35\x46\xb4\xb7\x93\xce\x14\xbf\xf1\x89\x47\x5e\x08\x4f\x72\x6e\x25\x8d\x1b\xb5\x9a\x02\xbd\x22\x56\xaa\x88\xba\xdc\x58\x14\x1b\x24\x20\x6a\xb9\xdc\xca\x34\xa2\xcc\x21\x47\x10\x0c\x8a\x8c\xa5\x7c\x5b\x43\x3e\x08\x43\x49\x1d\x36\xa2\x50\xf0\x4c\xb2\xbd\x77\xa0\xbc\x11\xc4\x4a\x49\x97\x4b\x89\xaf\xd5\x84\x73\x6c\x69\x0c\x3a\xb4\xbc\xf4\x0b\xd0\xbe\x70\xee\xd8\xc2\x81\xce\x5d\xa5\xc5\x0f\x4e\x8e\x58\xba\x0b\xc6\x52\xa3\xd1\xf9\x99\x31\x99\x92\xbc\x04\xe7\x0b\x53\xd4\x42\x1f\x52\x5e\x80\xaa\xa2\xb1\x29\x4b\xd0\xee\xa2\x1d\x04\xdf\xee\xcc\xd2\xa0\xb9\x38\x0b\x82\x93\x56\x10\xd0\x37\x76\xe2\x7f\x19\x7d\x5e\xba\xd1\xe5\x2a\x3b\x6c\x52\x92\xa7\x4a\xe2\xc7\xd0\x6f\xfb\x21\x4b\xc0\xe1\xf3\xe8\xe0\xbd\x41\x08\x68\x94\x99\x05\xac\xea\x2a\x79\x2b\x3c\xf5\xf6\x26\x59\x5c\xde\x4c\xfb\x2d\x1d\xb6\xe7\x78\xca\x71\x3a\xde\x5c\x85\x9f\xf7\x4f\xb3\xe1\x64\x3b\x98\x3d\x9c\x1b\xb1\xbe\xbf\x1e\xb8\x7e\xbf\xd5\x9f\x27\xcb\x75\xbf\x58\xaa\x9e\xcb\x47\xc3\xde\xe4\x7f\xb6\x92\xeb\x35\x73\xc3\xc5\x70\x11\x9e\x3b\x71\xd7\x1c\xbb\x45\x3f\x9f\xdc\xb5\x7b\x51\x54\x6f\x13\xd6\x38\x67\x2c\x64\xa0\x23\x4a\xd9\xfb\xba\x3f\xa2\xbf\x4a\x3f\xbe\x22\xe2\xac\x78\x67\xf4\xa7\xbf\x24\x9f\xdf\x9a\xc7\xe1\x7a\x38\xbd\xee\x0c\xb6\xc9\x7e\xfe\xf8\xe9\x4c\x2f\x9a\xcd\x4e\x3e\xba\xba\x85\x4c\xa5\xeb\xd5\x57\x17\xde\x8c\x6e\x67\xcd\xa6\x78\xd0\xf7\xf6\x52\x74\xc6\xab\xde\x48\xcc\xab\xd3\x60\x17\x6c\x15\x9f\xf3\xd9\xbd\xe4\xf6\xcb\xe8\x32\x87\xf9\xa2\x35\x3b\xab\xf4\x7e\xf7\xc7\xe4\x71\x97\x1d\xdd\xbf\xbe\x8d\x2d\xc8\x5d\x69\x2c\xbe\x38\x8c\x1d\x24\x98\x47\x89\xdc\x82\x90\xde\xe1\xe7\x84\x80\x06\x04\xae\x3c\x27\xb8\x92\x51\xe8\x07\x27\xc4\xe5\x16\xf4\xca\x43\xe3\xa5\x80\x91\x36\x94\x10\x16\x37\xba\xec\x78\xc2\x8d\xee\xd2\x24\x55\xdc\xf8\x1e\x00\x00\xff\xff\x27\xa9\xfd\xa3\xf3\x03\x00\x00")

func headerHtmlBytes() ([]byte, error) {
	return bindataRead(
		_headerHtml,
		"header.html",
	)
}

func headerHtml() (*asset, error) {
	bytes, err := headerHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.html", size: 1011, mode: os.FileMode(438), modTime: time.Unix(1602848011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _prefixListingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x08\xde\x25\x66\xbd\xd9\xc3\x2e\x64\x1f\x72\x0b\x10\x6c\x8b\xa6\xf9\x80\xb1\x34\xa2\x18\x53\xa4\x40\xd2\x6e\x1c\x42\xff\x5e\x48\xb6\x68\xd9\xa2\xed\x22\x28\x8a\x5c\x2c\x80\x9c\x79\x7c\xf3\xde\x78\x48\xef\x1d\xd6\x8d\x04\x87\x84\x56\x08\x05\x9a\xb4\x72\xb5\xa4\x6d\x3b\x9b\x65\x0a\xb6\x24\x97\x60\xed\x82\x2a\xd8\xae\xc0\x90\xfd\x27\x91\x82\x57\x8e\x2e\x67\x84\x64\x70\x1a\x91\xac\x0c\xa8\x82\x92\xca\x60\xb9\xa0\x95\x73\xcd\x7f\x8c\x39\x30\x85\xe0\x06\x0a\x4c\x85\x66\x7d\x1e\x21\x99\xa8\x39\xb1\x26\x5f\x50\x66\x1d\x38\x91\x33\x51\x73\x26\x35\xd7\xa9\xdd\x72\x4a\x40\xba\x05\xfd\x1e\x32\xc9\x93\xe6\x9a\x92\x0a\xbb\xa3\x17\x74\x7e\xd7\xbc\x51\x22\x35\x14\x42\xf1\x05\x95\xf0\xbe\xa3\x67\x4c\x3a\xa8\x3d\x47\x06\xfd\xa7\x10\xdb\xc3\xd1\x30\xe2\x67\x27\x04\xa5\xe6\x42\x05\xb4\x95\x53\x64\xe5\x54\xa2\x37\x4e\x0a\x85\x89\xc5\x5c\xab\x02\xcc\x8e\x2e\x9f\x05\x57\xe4\x51\x1d\xf0\x6f\xe2\x5a\xc1\xd5\xa6\xb9\x08\xdc\x18\x51\x1f\x61\x5f\x9a\x81\x36\xeb\x79\x67\x4c\xc1\x76\x39\x9b\x75\x55\x04\x04\x9e\x70\x83\x3b\x3a\x54\x37\xac\xe7\x5a\x39\x10\x0a\x4d\x22\xf9\xa0\xf6\x68\xdb\xe8\x1f\xe4\x75\x63\x9d\x28\x77\x49\x17\x8a\xca\x25\x39\x2a\x87\x86\x2e\x67\x7d\xf4\x39\x9c\x3c\xa0\x4c\x76\xc0\x14\xa4\x10\x06\x73\xa7\xcd\x8e\xd4\xbb\xe4\x9f\x23\x44\x1f\x6c\x31\x77\x42\xab\x21\xa1\x14\x12\x13\xa1\x4a\x4d\x1c\xbe\xb9\x44\x62\xe9\x4e\x13\x26\x4c\x47\x27\xdf\x62\x16\x22\xaa\xf9\x10\x10\xb8\x25\x5d\x73\x0b\xc5\xe9\xd2\xfb\xf4\x61\x93\xaf\xd1\xb5\x6d\xc6\xaa\xf9\x04\x9e\x85\x36\x39\x5b\xfa\xed\x2c\xef\x83\x8f\x06\xa1\xc8\xcd\xa6\x5e\xd9\x48\x20\x21\xde\x1b\x50\x1c\x49\xfa\x70\x0c\x6c\xdb\x48\x60\x68\x40\xe6\x7d\xfa\xf2\xed\xa9\x6d\xfb\x7a\xbf\x1a\x2c\xc5\x5b\x57\x2f\xc4\xe0\x33\xdb\x40\x70\xc8\x62\x03\x06\x9c\x36\x74\xc9\x32\xd6\xed\xc4\x19\xa1\x2a\x22\x14\x32\x56\xdd\x7f\x54\x51\x98\x9a\x26\x85\x5a\x0f\xb3\x24\x4d\xaf\x8a\x1c\x33\xe1\x57\x6c\xb8\x34\x88\x56\x90\xaf\x47\x83\xe8\x01\xf2\x75\x3c\x7b\x2c\xde\x91\xb9\x82\x1a\xe9\xb2\xcb\xba\x24\x62\x44\x96\x0b\x5a\xc1\x99\x52\xa1\x1d\x1e\x1d\xd6\xd3\x46\xf0\x5e\x94\x24\x78\x1e\xef\x92\xab\x4a\x7b\x9f\xfe\x0f\x35\x76\xcd\x13\xc9\x3e\x97\x35\x2e\x7c\x3c\xf6\x92\x05\x27\xf1\x51\x3b\x4a\x2d\xbb\xbb\xe9\x68\xc8\xbe\x3e\xca\x6e\xc2\x5d\xf3\x27\x54\x7a\xb9\xd3\x03\x4e\xcc\xae\x9b\x9b\x91\x7f\x9c\xf7\x28\x2d\x7e\x3e\x63\x92\x7f\x49\xf7\x6b\xeb\xe4\xaf\xbb\x8f\x9a\x24\x24\x8e\x2c\xfa\xb2\x7a\xc5\xdc\x7d\x12\x8b\x62\x15\xff\x3d\x54\x3c\xdf\x5f\x47\x26\x3c\x6b\xae\xd2\x6d\xa6\x5c\xad\x78\xdf\x73\x7d\x16\xef\x3d\xd7\xe6\x4f\xf5\xd2\x64\x0c\x0f\x6b\xe3\x5b\x98\x1d\xae\xe1\xd1\x20\x39\x39\x66\x3c\x8f\xc3\x46\x78\x78\xec\xf7\xc6\x2f\xc5\x52\x6b\x37\x7a\x29\xfe\x0c\x00\x00\xff\xff\x46\x5b\xe9\x05\x45\x0a\x00\x00")

func prefixListingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_prefixListingHtml,
		"prefix-listing.html",
	)
}

func prefixListingHtml() (*asset, error) {
	bytes, err := prefixListingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "prefix-listing.html", size: 2629, mode: os.FileMode(438), modTime: time.Unix(1602848040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _singleObjectHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\xef\x72\xdb\xb6\xb2\xff\xee\xa7\xd8\xf2\xce\x54\xf2\xc4\x24\x2d\x3b\xce\xad\x15\x51\x9d\xfc\x69\x7b\x9d\x71\x92\xb6\x4e\x9b\x49\x3b\x9d\x0e\x48\xac\x28\xc4\x20\xc0\x0b\x80\x92\x69\x8d\x66\xfa\x1a\x7d\x84\xf3\x1a\xe7\x51\xfa\x24\x67\x00\x52\x12\x29\x51\xb2\x7b\xce\xc9\x07\x85\x04\x17\x8b\xdd\xdf\x2e\x7e\xd8\x85\x17\x0b\x83\x59\xce\x89\x41\xf0\xa6\x48\x28\xaa\x60\x6a\x32\xee\x2d\x97\x47\x47\x23\xca\x66\x90\x70\xa2\x75\xe4\x25\x52\x18\xc2\x04\x2a\x7f\xc2\x0b\x46\xbd\xf1\x11\x40\xf3\xbb\x92\x73\x6f\x7c\x74\x04\xd0\x1e\x4e\x24\xf7\x79\xea\x5f\x42\x9c\xfa\xa9\xc2\x72\x25\xd3\x35\x19\x60\xf7\x4b\x22\x39\x18\xbc\x33\x7e\x82\xc2\xa0\x82\x2c\xf6\x9f\x36\x44\x01\x46\x04\xa6\x0a\x27\x91\x37\x35\x26\x1f\x86\xa1\x21\x8a\xb2\x54\x11\x8a\x01\x93\xa1\x37\x1e\xb1\x2c\x05\xad\x92\xc8\x0b\xb5\x21\x86\x25\x21\xcb\xd2\x90\xcb\x54\x06\x7a\x96\x7a\xab\x75\xec\x80\x07\x84\x9b\xc8\xbb\xb6\x8f\xe3\x51\x48\x5a\xcb\xe4\x2b\xc9\x09\xe3\xe8\x1b\x66\xec\xaf\xcc\x5b\xc6\x51\x5f\x48\x81\x40\xfd\x8c\xfa\x4c\x70\x26\xd0\x8f\xb9\x4c\x6e\xbd\xf1\x62\x11\xbc\x23\x19\x2e\x97\xa3\x30\x6f\x38\x1a\x52\x36\x5b\xbd\xd6\x2f\xdd\xe8\xc0\xe7\x42\x1b\x36\x29\x7d\x1b\x06\x14\x1b\x38\x8c\x7f\x61\x7f\x32\xea\x9f\xee\x47\xd0\xd7\x99\x3f\x38\x05\xfb\x94\x51\xff\x12\xea\xa0\x0c\xce\xdc\xd3\x1d\xf7\x2f\xdb\x90\x36\x67\x13\x45\x21\xf7\xcf\x21\xb7\x33\x2e\x5a\x72\x87\x62\xf8\xb8\x48\x5a\xd3\xcf\xed\x0f\x4f\x5b\xf6\xaf\xe7\x4f\x9f\x8d\x7f\x44\xc2\x7d\xc3\x32\x84\xd7\x4c\x1b\xc5\xe2\xc2\x30\x29\x40\x4e\x60\xa4\x73\x22\x56\xea\x9d\xea\xac\x30\x48\xa1\x11\x21\xda\x98\xd2\x8a\x82\x9d\x3a\x06\x29\xe0\xc3\x3a\x5f\x46\xe1\xf4\xd9\x8e\x03\xcd\x08\xed\x1f\x7a\x0c\x0c\x8c\x46\x5e\x46\x72\x46\xbd\xad\xbd\xf1\x55\x1b\x16\x92\x77\x01\xa1\x13\xc5\x72\xb3\xfb\x01\x60\x46\x14\x64\x65\x46\x72\x88\xe0\x3a\xc8\x48\xde\xef\xb9\x65\x7a\xc7\x81\x46\xf3\x33\xc3\x79\xff\xd7\xf3\x8b\x13\x18\x9c\xfe\x76\x02\x83\xe0\xec\xf8\xf9\x51\x87\x96\xeb\xc0\x30\x8e\xd7\xa4\x44\xd5\xef\xd9\xad\xa4\x87\x61\x48\x72\x66\x15\xc6\xf2\x2e\x48\x64\x16\x6a\x53\x72\xd4\xe1\x6c\x10\x2e\x18\x5d\x86\x76\x82\x0e\x17\xf7\xcb\x70\x71\xb7\x0c\x17\xe5\xf2\x6b\x92\x24\xa8\xf5\xef\x46\xde\xa2\x88\xf2\xdb\x00\xcb\x37\x83\xab\xcf\x92\x7d\x12\x6f\xa6\x71\xf6\xe3\x2c\x16\xef\x4e\xe3\xf3\x37\xff\x7f\xc5\xe6\xec\xd3\xcd\xd5\xb3\xab\xec\x9d\xfa\xe5\x9e\xab\xe4\xbb\x01\x4f\x5e\xbf\x2c\x31\x4b\xcb\x24\x1b\x0c\xde\xfe\xdf\x4b\xf6\xcb\xd9\xcf\xd3\xe4\xbb\x9f\xd8\xe4\x87\xe0\x36\xff\xdf\xaf\xbe\x49\x3f\x4d\xe4\xf5\xc7\x7b\xfc\xfe\xfd\xe9\xe4\x32\xf9\xf8\xf3\x0f\xbd\x13\x58\x74\x38\x02\x90\x91\xbb\x5f\xa4\xcc\x86\xf0\xec\xa4\xf3\x3b\x31\xeb\x94\x18\x42\xef\x2d\xc9\x81\x12\x43\xe0\xcb\x44\xe6\xe5\xf3\x36\x9f\x58\x10\xe6\xf3\x79\x20\x73\x14\xda\x28\x44\x93\x91\x3c\x90\x2a\x0d\xbd\xf1\xfb\x1c\xc5\x8d\x1b\x7b\x4b\x72\xcb\x16\x60\xf7\xa6\xd3\x2c\x95\x3e\x81\x1e\x3c\xe9\x5c\x7e\xf5\xaf\xb7\xb3\x52\xa2\x90\x18\x36\xc3\x44\x66\x99\x14\xda\xad\xc3\x59\x82\x42\xa3\x0e\xe3\xd2\xd7\x24\x3c\x0b\x4e\x43\x6f\xfc\xea\x95\xff\xf2\x93\x7f\xf3\xc2\xae\xfa\x88\x85\xae\x32\x92\xa2\x2a\xe1\x9f\xff\xe8\xf6\xae\x11\x62\x6f\xfc\xd6\xbd\x58\xcd\xbd\x6e\xf8\x18\x1d\x42\x2f\x96\x7a\x8a\x33\x7d\xcb\xc2\xe4\x36\x7d\x3a\x78\x76\x96\x5f\x9e\xde\x32\x1c\x5c\x8a\xfb\xcf\xf4\xfe\x6e\x3a\x8f\x2f\xf7\x4c\xb7\x59\x73\xc3\xee\x71\x08\x17\x83\xb3\x6e\x91\x7b\x29\xb3\xf7\x93\x89\x46\x33\x04\x7f\xd0\x2d\x13\x86\x60\xa6\x4c\xdb\xed\x02\x32\x77\x8c\x40\x99\x26\x31\x47\x0d\x73\xa9\x38\x85\xb9\x22\x79\xce\x44\x1a\x40\x5c\x02\xc5\x09\x29\xb8\x39\x01\x66\x80\x69\x98\x10\xae\x31\xe8\x54\x6c\x83\xc8\x44\x21\x0b\xfd\xd1\xaa\x19\x56\xb2\x87\x8d\xd8\x36\x80\x4b\x42\x99\x48\x9d\xaf\x1a\x64\x61\x34\xa3\x68\x19\xcb\x4c\xb1\xb6\x2e\x96\x85\xa0\xba\xdb\x04\x21\x3f\x2a\x92\x0f\xc1\xa8\x02\x3b\x04\x96\xc7\x01\xa1\xf4\x83\xec\xbb\x5d\xdf\xbd\x9d\x2d\x29\x28\x59\x18\xd4\x10\xc1\x62\x11\x5c\xcb\x84\x58\x1b\xf5\x72\xd9\x29\x9f\x30\x95\x70\x7c\x9f\x1b\x27\xbf\x07\x18\x2e\xd5\x10\x7a\xff\x73\x76\xf1\xd5\xd9\x64\xb2\x27\xbc\x13\xc6\xf9\xab\x47\x49\x2a\x42\x59\xa1\x87\xf0\xec\xf4\xf4\x74\xbf\xae\xf7\x39\x49\x98\x29\x87\xd0\x99\x07\xdd\xce\x4c\xa4\x82\xbe\x45\x80\x41\x04\xa7\xcf\x81\xc1\xa8\x06\x23\xe0\x28\x52\x33\x7d\x0e\xec\xc9\x93\xe3\x3d\x7e\x2a\x88\x6a\xe9\x5f\xd9\x6f\x5d\xea\x2d\x59\x56\x78\xf5\x7f\x55\xc1\x35\x31\xcc\x14\x14\x4f\x40\x05\xd7\x52\xa4\xee\xe5\xb7\x93\x06\xa2\xdb\xe1\xea\x70\x63\x97\xef\xc3\x6e\xc2\xef\x38\x7c\x3a\xeb\xad\xa7\x5d\x67\xc8\xba\x84\xc9\x8c\x15\x18\x69\xa3\xa4\x48\xc7\x37\x86\x18\x1b\x08\x77\x9c\xda\xe3\x96\x96\x0e\x42\x2a\xe7\xc2\x66\x72\x7d\x58\x8e\xc2\x5a\xbe\x55\xc2\x3c\xa4\xfc\x5b\xc6\x11\xdc\x7e\x5f\xcf\xaf\x17\x5a\x2c\x02\x3b\xbe\x3e\x8c\xff\xbe\xda\xef\x19\x26\xa8\xbb\x14\x57\x5f\x0e\xa9\x7e\xcc\xc1\xbe\x35\xf0\x1f\x57\x6b\x07\x0a\xb4\x4d\x75\xd6\xae\x06\xf2\x72\xab\xe6\x1a\x4d\x2f\xd6\x88\xc4\xfe\xb9\x37\xfe\x24\x8b\xbf\xfe\xf8\x53\x21\xbc\xae\xc3\xe5\x88\xc7\xb2\x92\xc3\xe8\x5b\x25\x33\x78\xc1\x39\xbc\x9f\xa1\x72\xfc\xe3\x68\x6d\x14\x4e\x2f\xda\xe5\xed\x78\x53\x08\xc1\xba\x6a\x42\x0d\xb9\x83\xb2\x22\x2f\xcb\x9c\x56\xa9\x14\x40\x20\xe5\x32\x26\x1c\x04\x9a\xb9\x54\xb7\x27\x90\x21\x11\x76\x6d\xc7\xb0\xe2\xaf\x3f\xfe\x34\x10\xa3\x1d\x58\xe5\x91\xad\xcc\xac\x35\xa4\x3a\x6f\x2b\x0f\x2d\x23\xff\xf5\xc7\x9f\x7a\x8f\xac\x90\x14\x35\x10\xce\x41\xae\xec\x77\xfc\x19\xc0\x87\x29\x3a\xf2\x27\xb1\x9c\x21\xe8\xa9\x9c\x6b\xf7\x99\xd7\x4c\xd7\xb2\xd8\xad\x50\x79\x12\x6c\x25\xc3\x03\xfd\x03\x18\xa2\x52\x34\x91\xf7\x7b\xcc\x89\xb8\xf5\x40\x21\x8f\x3c\x21\x6d\x45\x80\x6a\x5d\xca\xc5\x46\x40\x6c\x84\xcf\x59\x3a\x35\xd5\x53\x5a\x05\x32\x57\x2c\x23\xaa\x84\xfc\xae\x2a\x77\xcf\xea\x16\xe6\x1a\x89\x12\xf0\x56\x2a\x84\x17\xb1\x2c\x4c\xab\x10\x25\x8f\xc8\xba\xd6\xf3\x2e\x03\x9c\xaf\xd3\x66\x3b\x39\xb3\xb8\xea\x19\xce\x0f\xe4\xe3\x59\x77\x8f\xf5\xf5\x2a\x3e\x3b\x8e\xcb\xc2\xb8\x7e\x47\x63\x22\x05\x25\xaa\xdc\xd7\x79\xb1\x44\x0a\x7f\xa5\xc6\x8f\x79\x81\x55\x1f\xe6\x5a\xaf\x55\x0e\x6f\xb5\x5f\xdb\x1b\x71\x77\xf3\x38\xa8\x95\x05\x7f\x7f\x73\xa8\x77\xa2\xcb\x65\xca\xc4\x63\x5c\xb9\x61\xa9\x80\x2b\xb1\xdd\x13\x1e\xd6\xae\x59\x2a\x8a\x7c\xaf\xfa\x3a\x31\x6a\xe5\x3f\xe5\x0f\x46\xbd\x33\x9a\xfb\x63\xb8\xb7\xa5\xb3\x1b\x62\xbb\x8f\xdb\x1f\x2a\x2b\xdd\x88\x90\x23\x15\xfb\x61\x5b\xc3\x86\x97\x1a\xed\x97\xad\x7b\x62\xa2\x5a\x9d\xd7\x16\xf1\xec\x90\x6e\x93\xf1\xcf\xbd\xe6\x31\xd1\xbd\x6f\xf7\xe7\xe4\x6a\xeb\xd5\xdb\xd1\xfe\xe7\xda\x71\xa8\x98\x73\x95\x6c\x87\xbc\x5f\x27\xea\x7c\xca\x4c\x67\xa6\xae\xad\x75\x9b\x66\x3b\x43\xe2\xc2\x18\x29\xc0\x94\x39\x46\x5e\xf5\xe2\x81\x14\x09\x67\xc9\x6d\xe4\x59\x12\x79\x2b\x29\xe1\xfd\xe3\x87\xd2\xa4\xd3\x89\xa7\x10\x4b\x45\x51\xf9\x67\x6e\x5c\x4f\x89\x42\x6f\x7c\x63\xff\x3b\xe4\x94\x93\x6b\xf8\xe2\x26\xec\x38\x52\x59\xfb\x70\x4a\x6e\x78\xa8\x7e\x5a\x0d\x8c\xbe\xf0\x7d\xa8\x8c\x71\x4e\x82\xef\x8f\x5b\x57\x4a\x99\x1b\x9d\x10\x8a\x9e\xeb\x8e\x9d\x5d\x4e\xd4\xd2\x6e\xcc\x04\xc5\xbb\xc8\xf3\x07\x1e\x10\xc5\x88\xcf\x49\x8c\x9c\x23\x8d\xcb\xa6\xe8\xb5\x1d\xad\x25\xa6\x8c\x52\x14\x91\x67\x0b\xe7\x9d\x0b\x2a\xb7\x9a\x4f\x19\xe1\x32\x85\xe6\x4b\x7d\xd6\x22\xad\x53\x7a\x77\x52\x7d\x8c\xb7\x4e\xe6\x1a\xf9\x53\xc8\x1b\x27\xf4\xee\xd4\xea\x4a\x6d\x2d\xbd\x77\xbb\xe6\xa5\x2f\xa4\x61\x13\x56\x9d\x5e\x15\x20\x76\xf8\x5d\x73\xb4\x7b\xa3\xec\xcc\xf6\xad\xa1\xde\xf8\x9a\x89\x5b\x78\x25\x73\x86\xf4\x8b\xfd\xf7\x4e\xed\x9a\xc2\x19\xed\x36\x2f\x64\x77\x3e\x29\x8c\xdc\x8e\x4d\x05\x78\x9d\x65\x7b\xf6\xb5\x0b\x7d\x77\xf2\xaf\x6c\xe6\x52\xa3\xe7\x2a\x01\x9f\x32\x9d\xb1\xf5\xea\xcd\x68\x47\xde\x2b\x27\xd7\xf2\xdb\xdd\xfa\x74\xc4\xfb\x4b\xc3\x32\xd4\xcf\xeb\x9a\xaf\xe1\x6c\x9d\xc9\x2e\xff\x1e\x60\xd4\xca\xff\x58\xd2\x12\x72\xd3\x0e\x57\x3e\x7e\x53\x68\x03\x16\x6c\x20\x82\x42\x4e\xb4\xc1\xaa\xe4\xb0\x38\xc7\xc8\xe5\x1c\x8c\x04\x87\xd4\xa6\xf4\x68\xd7\x1b\x23\x26\xf2\xc2\xac\x99\x52\xaa\xcc\x25\x97\x92\x1c\x9a\x2f\x76\xa7\xdb\x82\x17\x9c\xb8\x5f\x28\xbb\x23\x1c\x8c\xee\xd1\x06\xc4\x3d\x28\x24\x54\x0a\x5e\x36\x16\xe8\x04\x5d\x90\x0c\xab\x3c\x39\x50\xb1\x54\x9f\xd7\xe4\x64\x5f\xfb\xc7\xde\xf8\x95\xcc\xcb\x6d\x36\x78\x00\xbf\x89\x94\x66\x4f\xd2\x1f\xca\x89\x2e\xde\xae\xb8\xae\x22\xbf\x3d\xe9\xb2\xb1\xd8\xe6\xca\x8a\x4f\xc7\xaf\xa5\xc0\x03\x76\xaf\x1f\xdb\xac\xd5\x91\x0c\x24\xb9\xa5\x4a\xe6\x8e\xa8\x5c\xa1\x59\x05\x60\x35\xee\x81\xbb\x17\x8b\x3c\xca\x74\xce\x49\x39\x04\x21\x05\x3e\xb7\x14\x5a\xf3\x60\xd5\xca\xd5\x3e\xdb\xad\x19\x7e\x26\x33\x52\x8d\x3a\x6c\x26\x85\x48\xaa\x9a\x75\x73\x20\xd4\xdd\x29\x95\x49\x91\xa1\x30\x41\x8a\xe6\x1b\x8e\xf6\xf1\x65\x79\x45\xfb\x9b\xe5\x8f\x03\xb7\x7e\x50\x2f\x0f\x11\x78\xd5\xa5\xf3\xe1\xf9\x0d\xb2\xfd\x6f\x68\x70\x90\x59\x2a\x80\x27\x11\x78\x0e\xa5\x23\xdb\xd8\x36\xbd\x6b\xc6\x67\xdd\x7c\xff\x5b\x0e\x5a\x84\xbd\x87\x14\x1c\xf6\xf0\xef\xab\x68\xb9\xf8\x37\xa7\x04\x0a\x73\x4e\x12\xec\x57\xd0\x9c\x80\xe7\x1d\x3f\xb4\xf8\x0e\xfb\x1f\xf0\x62\x0b\x68\xb7\x75\x6b\x88\x05\x99\xb1\x94\x18\xa9\x82\x84\xb3\x3c\x96\x44\xd1\x60\xae\x98\xc1\x0f\x78\x67\xfa\x8e\x60\x82\x19\xe1\x05\x1e\x1f\x0e\xf7\x63\xcc\x59\xa7\x8d\xb3\x87\xa3\xa9\x0e\x5a\xd8\x8f\x57\x6f\x83\x57\xcf\xdd\x8d\xd8\x49\x15\x49\x1e\x98\x54\x28\x27\x7d\x04\x30\x67\x82\xca\x79\x50\x73\x00\x44\x1b\x10\xfa\x38\x43\x61\x36\x89\xc6\x26\xf5\x50\x50\xb5\x74\x10\x45\x95\x75\xed\x8b\xa0\x66\x92\xd6\xc3\xcb\x95\x43\xeb\xc5\x5c\xd9\x18\x41\xff\x18\xa2\x71\x3d\xbb\x02\x52\xa3\x79\x51\x5f\x2f\x63\xbf\xe7\x60\xed\x9d\xac\xe6\xad\x5a\xd3\xc0\x16\xae\xce\xd9\xe5\xd1\xe6\xa2\xe7\xa8\xf9\x97\xb8\x8a\x41\xd7\x7f\x89\xfb\x57\x00\x00\x00\xff\xff\x05\x25\x64\xe6\xa5\x1b\x00\x00")

func singleObjectHtmlBytes() ([]byte, error) {
	return bindataRead(
		_singleObjectHtml,
		"single-object.html",
	)
}

func singleObjectHtml() (*asset, error) {
	bytes, err := singleObjectHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "single-object.html", size: 7077, mode: os.FileMode(438), modTime: time.Unix(1602848011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"404.html":            _404Html,
	"footer.html":         footerHtml,
	"header.html":         headerHtml,
	"prefix-listing.html": prefixListingHtml,
	"single-object.html":  singleObjectHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"404.html":            {_404Html, map[string]*bintree{}},
	"footer.html":         {footerHtml, map[string]*bintree{}},
	"header.html":         {headerHtml, map[string]*bintree{}},
	"prefix-listing.html": {prefixListingHtml, map[string]*bintree{}},
	"single-object.html":  {singleObjectHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
